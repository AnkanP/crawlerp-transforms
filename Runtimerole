variable "role_arn" {
  type        = string
  description = "Optional existing IAM role ARN. If not set, a new IAM role and its policies will be created."
  default     = null
}

locals {
  create_role = var.role_arn == null
}

# --- (1) Create new role only if no role ARN provided
resource "aws_iam_role" "new_role" {
  count = local.create_role ? 1 : 0

  name = "my-auto-created-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
      Action = "sts:AssumeRole"
    }]
  })
}

# --- (2) Fetch existing IAM role if ARN provided
data "aws_iam_role" "existing" {
  count = local.create_role ? 0 : 1
  arn   = var.role_arn
}

# --- (3) Determine which ARN to use downstream
locals {
  effective_role_arn  = local.create_role ? aws_iam_role.new_role[0].arn : data.aws_iam_role.existing[0].arn
  effective_role_name = local.create_role ? aws_iam_role.new_role[0].name : data.aws_iam_role.existing[0].name
}

# --- (4) Create and attach managed policies only if new role created
resource "aws_iam_role_policy_attachment" "basic_execution" {
  count      = local.create_role ? 1 : 0
  role       = aws_iam_role.new_role[0].name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

resource "aws_iam_role_policy_attachment" "s3_access" {
  count      = local.create_role ? 1 : 0
  role       = aws_iam_role.new_role[0].name
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"
}

# --- (5) Optional inline policy example (for new roles only)
resource "aws_iam_role_policy" "inline_policy" {
  count = local.create_role ? 1 : 0

  name = "custom-inline-policy"
  role = aws_iam_role.new_role[0].name

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect   = "Allow"
      Action   = ["logs:CreateLogGroup", "logs:PutLogEvents"]
      Resource = "*"
    }]
  })
}

# --- (6) Unified output (ARN + Name)
output "iam_role_arn" {
  value = local.effective_role_arn
}

output "iam_role_name" {
  value = local.effective_role_name
}
