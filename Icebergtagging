import sys
from awsglue.utils import getResolvedOptions
from pyspark.sql import SparkSession

# -------------------
# Glue Job Arguments
# -------------------
args = getResolvedOptions(sys.argv, ["JOB_NAME", "JOB_RUN_ID"])
job_run_id = args["JOB_RUN_ID"]

# -------------------
# Spark Session Config
# -------------------
spark = (
    SparkSession.builder.appName("GlueIcebergTaggingJob")
    .config("spark.sql.catalog.glue_catalog", "org.apache.iceberg.spark.SparkCatalog")
    .config("spark.sql.catalog.glue_catalog.warehouse", "s3://my-iceberg-warehouse/")
    .config("spark.sql.catalog.glue_catalog.catalog-impl", "org.apache.iceberg.aws.glue.GlueCatalog")
    .config("spark.sql.catalog.glue_catalog.io-impl", "org.apache.iceberg.aws.s3.S3FileIO")
    .getOrCreate()
)

# -------------------
# Step 1: Write Data
# -------------------
# Example write (replace with your ETL logic)
df = spark.createDataFrame(
    [(1, "Alice"), (2, "Bob")],
    ["id", "name"]
)

df.writeTo("glue_catalog.my_db.my_table").append()

# -------------------
# Step 2: Tag Latest Snapshot
# -------------------
latest_snapshot = (
    spark.sql("SELECT snapshot_id FROM glue_catalog.my_db.my_table.snapshots "
              "ORDER BY committed_at DESC LIMIT 1")
    .collect()[0][0]
)

tag_name = f"job_{job_run_id}"

spark.sql(f"""
    ALTER TABLE glue_catalog.my_db.my_table
    CREATE TAG {tag_name}
    AS OF VERSION {latest_snapshot}
""")

print(f"✅ Tagged snapshot {latest_snapshot} as {tag_name}")

# -------------------
# Step 3: Retain Only Last N Tags
# -------------------
N = 30  # keep only the last 30 tags

tags_df = spark.sql("""
    SELECT tag_name, snapshot_id, snapshot_id AS version, created_at
    FROM glue_catalog.my_db.my_table.tags
    ORDER BY created_at DESC
""")

tags = [row.tag_name for row in tags_df.collect()]

if len(tags) > N:
    to_drop = tags[N:]  # tags beyond the most recent N
    for tag in to_drop:
        spark.sql(f"ALTER TABLE glue_catalog.my_db.my_table DROP TAG {tag}")
        print(f"🗑️ Dropped old tag: {tag}")
