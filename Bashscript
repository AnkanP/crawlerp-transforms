#!/bin/bash

set -euo pipefail

# 🧾 Usage help
usage() {
  echo "Usage: $0 -v <version> -r <requirements_path> -h <helpers_dir> -s <source_dir> -o <output_dir>"
  exit 1
}

# 🏗️ Parse arguments
while getopts ":v:r:h:s:o:" opt; do
  case ${opt} in
    v ) VERSION=$OPTARG ;;
    r ) REQUIREMENTS=$OPTARG ;;
    h ) HELPERS=$OPTARG ;;
    s ) SOURCE_DIR=$OPTARG ;;
    o ) OUTPUT_DIR=$OPTARG ;;
    * ) usage ;;
  esac
done

# ✅ Check required args
if [[ -z "${VERSION:-}" || -z "${REQUIREMENTS:-}" || -z "${HELPERS:-}" || -z "${SOURCE_DIR:-}" || -z "${OUTPUT_DIR:-}" ]]; then
  usage
fi

echo "📦 Building Glue job packages"
echo "  Version:         $VERSION"
echo "  Requirements:    $REQUIREMENTS"
echo "  Helpers folder:  $HELPERS"
echo "  Job source dir:  $SOURCE_DIR"
echo "  Output dir:      $OUTPUT_DIR"

# 📁 Install requirements
mkdir -p shared/python
pip install -r "$REQUIREMENTS" -t shared/python

# 📁 Build each job
mkdir -p "$OUTPUT_DIR"

find "$SOURCE_DIR" -mindepth 2 -maxdepth 2 -name '*.py' | while read -r pyfile; do
  job_script=$(basename "$pyfile")
  job_name="${job_script%.*}-${VERSION}"

  echo "➡️ Packaging $job_script → $job_name.zip"

  mkdir -p package

  # Inject or update __version__
  tmp_script="package/$job_script"
  if grep -q '__version__' "$pyfile"; then
    sed "s/__version__ *= *.*/__version__ = '${VERSION}'/" "$pyfile" > "$tmp_script"
  else
    echo "__version__ = '${VERSION}'" > "$tmp_script"
    cat "$pyfile" >> "$tmp_script"
  fi

  cp -r "$HELPERS" package/
  cp -r shared/python package/

  (cd package && zip -qr "../$OUTPUT_DIR/${job_name}.zip" .)
  rm -rf package
done
